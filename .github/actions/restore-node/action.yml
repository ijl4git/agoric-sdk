name: Agoric SDK restore Node.js build
description: 'Set up Node.js environment and restore cached built files'

inputs:
  node-version:
    description: 'The version of Node.js to use'
    required: true
  path:
    description: 'The relative path to the agoric-sdk directory'
    required: false
    default: '.'
  keep-endo:
    description: 'Keep Endo repository after installing from it'
    required: false
    default: 'false'
  xsnap-random-init:
    description: Build xsnap binary with random memory init
    required: false
    default: '0'

outputs:
  endo-branch:
    description: 'The branch of Endo used (NOPE if no override)'
    value: ${{ steps.endo-branch.outputs.result }}

runs:
  using: composite
  steps:
    - name: set default environment variables
      run: echo ESM_DISABLE_CACHE=true >> $GITHUB_ENV
      shell: bash
    - uses: actions/checkout@v3
      with:
        clean: false
        submodules: 'true'
        persist-credentials: false
        path: ${{ inputs.path }}
    # Select a branch on Endo to test against by adding text to the body of the
    # pull request. For example: #endo-branch: some-pr-branch
    # The default is '*NOPE*' to indicate not to check out Endo, just use
    # the published NPM packages.
    - name: Get the appropriate Endo branch
      id: endo-branch
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |-
          let branch = 'NOPE';
          if (context.eventName === 'schedule') {
            branch = 'master';
          } else if (context.payload.pull_request) {
            const { body } = context.payload.pull_request;
            const regex = /^\#endo-branch:\s+(\S+)/m;
            const result = regex.exec(body);
            if (result) {
              branch = result[1];
            }
          }
          console.log(branch);
          return branch;
    - name: check out Endo if necessary
      id: endo-checkout
      uses: actions/checkout@v3
      with:
        repository: agoric/endo
        path: ./replacement-endo
        ref: ${{ steps.endo-branch.outputs.result }}
        clean: 'false'
        submodules: 'true'
        persist-credentials: false
      if: steps.endo-branch.outputs.result != 'NOPE'
    - name: Move Endo checkout outside the working directory
      id: endo-sha
      run: |-
        set -ex
        if test -e ./replacement-endo; then
          mv ./replacement-endo ~/endo
          sha=$(cd ~/endo && git rev-parse HEAD)
        else
          sha=NOPE
        fi
        echo "sha=$sha" >> $GITHUB_OUTPUT
        cd "${{ inputs.path }}"
        echo "$sha" > endo-sha.txt
        git add endo-sha.txt
      shell: bash
    - name: merge endo integration branch
      id: endo-integration-merge
      run: |-
        set -e
        git ls-remote --exit-code --heads origin "refs/heads/integration-endo-${{ steps.endo-branch.outputs.result }}" || exit 0
        git fetch --unshallow origin integration-endo-${{ steps.endo-branch.outputs.result }}
        git config user.name github-actions
        git config user.email github-actions@github.com
        git merge --commit --no-edit origin/integration-endo-${{ steps.endo-branch.outputs.result }}
      shell: bash
      working-directory: ${{ inputs.path }}
      if: steps.endo-branch.outputs.result != 'NOPE'
    - name: Reconfigure git to use HTTP authentication
      run: git config --global url."https://github.com/".insteadOf ssh://git@github.com/
      shell: bash
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        cache: yarn
        cache-dependency-path: |
          ${{ inputs.path }}/yarn.lock
          ${{ inputs.path }}/endo-sha.txt
    - uses: kenchan0130/actions-system-info@master
      id: system-info
    - name: restore built files
      id: built
      uses: actions/cache@v3
      with:
        path: ${{ inputs.path }}
        key: ${{ runner.os }}-${{ runner.arch }}-${{ steps.system-info.outputs.release }}-node-${{ inputs.node-version }}-built-${{ inputs.xsnap-random-init }}-${{ github.sha }}-${{ steps.endo-sha.outputs.sha }}
    # This and the git diff below are to detect if `yarn install` results in a
    # change to the lock file.
    - name: yarn install
      working-directory: ${{ inputs.path }}
      run: |-
        set -ex
        if test "${{ inputs.xsnap-random-init }}" != 0 && test -d /etc/apt; then
          # Need libbsd-dev, as it's referenced in xsnapPlatform.h
          sudo apt-get update
          sudo apt-get install libbsd-dev
        fi
        # Replace the Endo packages with the ones built from the checked-out branch.
        if test -e ~/endo; then
          scripts/get-packed-versions.sh ~/endo | scripts/resolve-versions.sh
        fi
        cp package.json package.json.orig
        yarn install

        if cmp -s package.json.orig package.json; then
          # We need to generate a yarn-installed.sum that matches the
          # unmodified package.json.  As long as we don't explicitly
          # `yarn install` anywhere other than in this action and in
          # the bin/agd script, we should be able to reuse even
          # Endo-overridden built caches successfully.
          git checkout HEAD -- package.json
        fi
        rm package.json.orig

        function findsha1() {
          find ${1+"$@"} -print0 | xargs -0 sha1sum | sort +1 || true
        }

        # Find the current list of package.jsons.
        files=( package.json )
        while IFS= read -r line; do
          files+=( "$line" )
        done < <(yarn -s workspaces info |
          sed -ne '/"location":/{ s/.*": "//; s!",.*!/package.json!; p; }')

        mkdir -p node_modules/.cache/agoric
        findsha1 "${files[@]}" > node_modules/.cache/agoric/yarn-installed.sum

        if test -e ~/endo; then
          # Stage the redirected `yarn install` consequences.
          git add package.json yarn.lock
          ${{ inputs.keep-endo }} || rm -rf ~/endo
        fi
      shell: bash
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      working-directory: ${{ inputs.path }}
      run: |-
        set -ex
        yarn build
        mkdir -p node_modules/.cache/agoric
        date > node_modules/.cache/agoric/yarn-built
      shell: bash
      if: steps.built.outputs.cache-hit != 'true'
      env:
        XSNAP_RANDOM_INIT: ${{ inputs.xsnap-random-init }}
    - name: git dirty check
      working-directory: ${{ inputs.path }}
      run: |-
        set -x
        # In case of Endo override, ignore matching index and worktree.
        # (First column is non-space, second column is space, followed by separator.)
        if [ -n "$(git status --porcelain | grep -Eve '^[^ ]  '; true)" ]; then
          git status
          echo "Unexpected dirty git status" 1>&2
          exit 1
        fi
      shell: bash
