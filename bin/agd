#! /usr/bin/env bash
# bin/agd - A build wrapper to bootstrap the Agoric daemon
#
# Usage: agd build
#        to rebuild the SDK if necessary
#    or: agd build --force
#        to rebuild the SDK even if up-to-date
#    or: agd ARGS...
#        to rebuild the SDK if necessary, then invoke the daemon with ARGS
#
# This uses SKIP_DOWNLOAD=false or the Cosmovisor $DAEMON_HOME and
# $DAEMON_ALLOW_DOWNLOAD_BINARIES variables to enable the automatic downloading
# of Golang and NodeJS versions needed to build and run the current version of
# the SDK.
set -ueo pipefail

function fatal() {
  echo ${1+"$@"} 1>&2
  exit 1
}

function findsha1() {
  find ${1+"$@"} -print0 | xargs -0 sha1sum | sort +1 || true
}

GVM_URL=${GVM_URL-https://github.com/devnw/gvm/releases/download/latest/gvm}
NVM_GIT_REPO=${NVM_GIT_REPO-https://github.com/nvm-sh/nvm.git}

STAMPS=node_modules/.cache/agoric

real0=$(readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")
thisdir=$(cd "$(dirname -- "$real0")" >/dev/null && pwd -P)

# shellcheck disable=SC1091
source "$thisdir/../repoconfig.sh"

if test "${1-''}" = build; then
  BUILD_ONLY=true
  # Enable shell debugging.
  set -x
  case "${2-''}" in
  --force | -f)
    rm -rf "$thisdir/../$STAMPS"
    ;;
  esac
else
  BUILD_ONLY=false
fi

NEED_NODEJS=$BUILD_ONLY
case $@ in
start | *" start" | *" start "*)
  # We're starting the daemon, so we need Node.js.
  NEED_NODEJS=true
  ;;
esac

# Only allow auto-downloading if explicitly set.
if test "${SKIP_DOWNLOAD-}" = false; then :
elif test -n "${DAEMON_HOME-}" && test "${DAEMON_ALLOW_DOWNLOAD_BINARIES-}" = true; then
  # Cosmovisor download mode detected.
  SKIP_DOWNLOAD=false
else
  # Skip the download by default.
  SKIP_DOWNLOAD=true
fi

if $NEED_NODEJS; then
  # We need to get node at the script top level because it's used by the daemon
  # as well.
  case $(node --version 2>/dev/null) in
  "$NODEJS_VERSION" | "$NODEJS_VERSION".*) ;;
  *)
    # Auto-download the NodeJS version we need, if allowed.
    $SKIP_DOWNLOAD || {
      if test -z "${NVM_DIR-}"; then
        export "NVM_DIR=${DAEMON_HOME-$HOME}/.nvm"
      fi
      if test ! -s "$NVM_DIR/nvm.sh"; then
        git clone "$NVM_GIT_REPO" "$NVM_DIR"
        (
          cd "$NVM_DIR"
          git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
        )
      fi
      # shellcheck disable=SC1091
      source "$NVM_DIR/nvm.sh" --no-use
      nvm ls "$NODEJS_VERSION" >/dev/null 2>&1 || {
        nvm install "$NODEJS_VERSION"
      }
      nvm use "$NODEJS_VERSION"
    } 1>&2
    ;;
  esac
fi

(
  # Send the build output to stderr unless we're only building.  This prevents
  # the daemon's stdout from being polluted with build output.
  $BUILD_ONLY || exec 1>&2

  cd "$thisdir/.."
  test -d "$STAMPS" || echo "Creating $STAMPS" 1>&2
  mkdir -p "$STAMPS"

  if $NEED_NODEJS; then
    lazy_yarn() {
      yarn --version 2>/dev/null 1>&2 || {
        # Auto-download the Yarn version we need, if allowed.
        $SKIP_DOWNLOAD || {
          npm install -g yarn
        }
      }
      yarn "$@"
    }

    # Check if any package.json sums are different.
    sum=$STAMPS/yarn-installed.sum

    # Find the current list of package.jsons.
    files=( package.json )
    while IFS= read -r line; do
      files+=( "$line" )
    done < <(lazy_yarn -s workspaces info |
      sed -ne '/"location":/{ s/.*": "//; s!",.*!/package.json!; p; }')

    findsha1 "${files[@]}" > "$sum.new" || true
    diff -u "$sum" "$sum.new" || {
      echo "$sum has changed"
      rm -f "$sum" "$STAMPS/yarn-built"
      lazy_yarn install
      mv "$sum.new" "$sum"
    }
    rm -f "$sum.new"

    stamp=$STAMPS/yarn-built
    test -e "$stamp" || {
      echo "Yarn packages need to be built"
      lazy_yarn build
      date > "$stamp"
    }
  fi

  sum=$STAMPS/golang-built.sum
  findsha1 "$GOLANG_DIR" \( \
    ! -name '*_test.go' -name '*.go' \
    -o -name '*.cc' \
    -o -name 'go.*' \) > "$sum.new" || true
  diff -u "$sum" "$sum.new" || {
    echo "$GOLANG_DIR $sum has changed"
    rm -f "$sum"
    (
      # Run this build in another subshell in case we had to modify the path.
      case $(go version 2>/dev/null) in
      "go version go$GOLANG_VERSION "* | "go version go$GOLANG_VERSION."*) ;;
      *)
        # Auto-download the Golang version we need, if allowed.
        $SKIP_DOWNLOAD || {
          export HOME=${DAEMON_HOME-$HOME}
          mkdir -p "$HOME/bin"

          # shellcheck disable=SC2030
          PATH="$HOME/.gvm/go/bin:$HOME/bin:$PATH"
          test -x "$HOME/bin/gvm" || {
            curl -L "$GVM_URL" > "$HOME/bin/gvm"
            chmod +x "$HOME/bin/gvm"
          }
          gvm "$GOLANG_VERSION" -s
        }
        ;;
      esac
      # Ensure minimum patch versions of Go environment
      goversion=$(go version 2>/dev/null)
      goregexp='go version go([0-9]+)(.([0-9]+)(.([0-9]+))?)? '
      [[ "$goversion" =~ $goregexp ]] || fatal "illegible go version '$goversion'"
      golang_version_check "${BASH_REMATCH[1]}" "${BASH_REMATCH[3]}" "${BASH_REMATCH[5]}"
      # Build the daemon.
      cd "$GOLANG_DIR"
      make
    )
    mv "$sum.new" "$sum"
  }
  rm -f "$sum.new"
)

# the xsnap binary lives in a platform-specific directory
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     platform=lin;;
    Darwin*)    platform=mac;;
    *)          platform=win;;
esac

# check the xsnap version against our baked-in notion of what version we should be using
xsnap_version=$("${thisdir}/../packages/xsnap/xsnap-native/xsnap/build/bin/${platform}/release/xsnap-worker" -n)
[[ "${xsnap_version}" == "${XSNAP_VERSION}" ]] || fatal "xsnap version mismatch; expected ${XSNAP_VERSION}, got ${xsnap_version}"

if $BUILD_ONLY; then
  echo "Build complete." 1>&2
  exit 0
fi

# Run the built Cosmos daemon.
# shellcheck disable=SC2031
export PATH="$thisdir/../packages/cosmic-swingset/bin:$PATH"
exec "$thisdir/../$GOLANG_DAEMON" ${1+"$@"}
